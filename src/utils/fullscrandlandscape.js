/**
 * P≈ôid√° fullscreen tlaƒç√≠tko do Phaser sc√©ny (pouze na Androidu)
 * a overlay s v√Ωzvou k otoƒçen√≠ za≈ô√≠zen√≠ do landscape na v≈°ech mobiln√≠ch za≈ô√≠zen√≠ch.
 * Tlaƒç√≠tko umo≈æ≈àuje p≈ôep√≠n√°n√≠ mezi fullscreen a windowed re≈æimem a z≈Øst√°v√° viditeln√© v obou stavech.
 * @param {Phaser.Scene} scene - instance Phaser sc√©ny
 * @param {string} textureKey - kl√≠ƒç obr√°zku tlaƒç√≠tka (mus√≠ b√Ωt naƒçten√Ω v preload)
 * @param {number} [x] - X pozice (v√Ωchoz√≠: prav√Ω horn√≠ roh s odsazen√≠m 20px)
 * @param {number} [y] - Y pozice (v√Ωchoz√≠: 20px od horn√≠ho okraje)
 * @param {number} [scale] - mƒõ≈ô√≠tko tlaƒç√≠tka (v√Ωchoz√≠: 2.0 pro mobil)
 */
export function addFullscreenAndLandscape(scene, textureKey, x, y, scale) {
    // Detekce mobiln√≠ho za≈ô√≠zen√≠
    const isMobile = /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent);
    
    // V√Ωchoz√≠ ≈°k√°la podle za≈ô√≠zen√≠ - vƒõt≈°√≠ pro mobiln√≠ dotykov√° za≈ô√≠zen√≠
    if (scale === undefined) {
        scale = isMobile ? 2.0 : 1.2; // 48-60px pro mobil, ~29px pro desktop
    }
    
    // Fullscreen tlaƒç√≠tko pouze na Androidu
    if (/Android/i.test(navigator.userAgent)) {
        // Pozice s ohledem na velikost ikony (vƒõt≈°√≠ ikona = v√≠ce m√≠sta od okraje)
        const iconSize = 24 * scale; // p≈ôedpokl√°dan√° velikost p≈Øvodn√≠ ikony 24px
        const margin = Math.max(30, iconSize / 2 + 15); // vƒõt≈°√≠ margin pro vƒõt≈°√≠ tlaƒç√≠tko
        
        const posX = x !== undefined ? x : scene.scale.width - margin;
        const posY = y !== undefined ? y : margin;

        const btn = scene.add.image(posX, posY, textureKey)
            .setInteractive({ useHandCursor: true })
            .setScrollFactor(0)
            .setDepth(1000)
            .setScale(scale);

        console.log(`üéÆ Fullscreen tlaƒç√≠tko vytvo≈ôeno na pozici: ${posX}, ${posY}, scale: ${scale}`);

        // Funkce pro p≈ôep√≠n√°n√≠ fullscreen re≈æimu
        const toggleFullscreen = () => {
            console.log(`üîÑ Toggle fullscreen: aktu√°ln√≠ stav = ${scene.scale.isFullscreen}`);
            if (scene.scale.isFullscreen) {
                scene.scale.stopFullscreen();
                console.log('üì± Vyp√≠n√°m fullscreen');
            } else {
                scene.scale.startFullscreen();
                console.log('üñ•Ô∏è Zap√≠n√°m fullscreen');
            }
        };

        // Funkce pro aktualizaci vzhledu tlaƒç√≠tka podle stavu
        const updateButtonAppearance = () => {
            if (scene.scale.isFullscreen) {
                // Ve fullscreen - tlaƒç√≠tko je trochu pr≈Øhlednƒõj≈°√≠ (indikuje mo≈ænost vypnut√≠)
                btn.setAlpha(0.7);
                btn.setTint(0xffcccc); // Lehce ƒçerven√Ω n√°dech
            } else {
                // Mimo fullscreen - norm√°ln√≠ vzhled
                btn.setAlpha(1);
                btn.clearTint();
            }
        };

        btn.on('pointerup', toggleFullscreen);

        // Aktualizace vzhledu p≈ôi zmƒõnƒõ fullscreen stavu
        scene.scale.on('enterfullscreen', updateButtonAppearance);
        scene.scale.on('leavefullscreen', updateButtonAppearance);
        
        // Poƒç√°teƒçn√≠ nastaven√≠ vzhledu
        updateButtonAppearance();
    }

    // Landscape overlay pro v≈°echna mobiln√≠ za≈ô√≠zen√≠
    if (isMobile) {
        let overlayBg, overlayText;
        
        function showOverlay() {
            if (!overlayBg) {
                overlayBg = scene.add.rectangle(
                    scene.scale.width / 2, scene.scale.height / 2,
                    scene.scale.width, scene.scale.height,
                    0x000000, 0.85
                ).setOrigin(0.5).setDepth(2000);
                overlayText = scene.add.text(
                    scene.scale.width / 2, scene.scale.height / 2,
                    'Pros√≠m otoƒçte za≈ô√≠zen√≠ na ≈°√≠≈ôku (landscape).',
                    { font: 'bold 26px Arial', color: '#fff', align: 'center', wordWrap: { width: scene.scale.width - 60 } }
                ).setOrigin(0.5).setDepth(2001);
            } else {
                overlayBg.setVisible(true);
                overlayText.setVisible(true);
            }
            scene.scene.pause();
        }
        
        function hideOverlay() {
            if (overlayBg) overlayBg.setVisible(false);
            if (overlayText) overlayText.setVisible(false);
            scene.scene.resume();
        }
        
        function checkOrientation() {
            if (window.innerHeight > window.innerWidth) {
                showOverlay();
            } else {
                hideOverlay();
            }
        }
        
        window.addEventListener('resize', checkOrientation);
        window.addEventListener('orientationchange', checkOrientation);
        scene.events.once('destroy', () => {
            window.removeEventListener('resize', checkOrientation);
            window.removeEventListener('orientationchange', checkOrientation);
        });
        
        // Prvn√≠ kontrola po naƒçten√≠ sc√©ny
        setTimeout(checkOrientation, 200);
    }
}